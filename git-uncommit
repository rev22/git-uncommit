#!/bin/sh

# Copyright (c) 2013 Michele Bini

# This program is free software: you can redistribute it and/or modify
# it under the terms of the version 3 of the GNU General Public License
# as published by the Free Software Foundation.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

println() {
    printf "%s\n" "$*"
}

warn() {
    println "$0: $*" >&2
}

die() {
    warn "$*"
    exit 1
}

toascii() {
    if which uni2ascii >/dev/null 2>&1; then
	uni2ascii -qBP
    else
	cat
    fi
}

namecommit() {
    (git show "$1"|git patch-id|head --bytes=7; git show "$1"|head -n5|tail -n1)|toascii|sed -E "; s/[^a-zA-Z0-9]+/ /g; s/^ //; s/ $//; s/ /-/g"|head --bytes=40|tr A-Z a-z|sed "s/-$//"
}

branchname() {
  git branch|sed -n "s/[*] //p"
}

selectbranch() {
  git symbolic-ref HEAD refs/heads/"$1"
}

noerr() {
    "$@" 2>/dev/null
}

# Directory where to save patches, can be absolute or relative to top-level of the worktree
patchdir="$(noerr git config --path --local --get git.uncommit.patchdir)"

# Top level of the work tree, if possible relative to current directory
topleveldir="$(noerr git rev-parse --show-cdup || noerr git rev-parse --show-toplevel)"

# Current directory, relative to top level of work tree
prefixdir="$(noerr git rev-parse --show-prefix)"

if [ -n "$patchdir" ]; then
    patchdir="$( ([ -n "$topleveldir" ] && cd "$topleveldir") && cd "$patchdir" && pwd)"
fi
set -e

while case "$1" in
    --patchdir) shift; patchdir="$1"; shift ;;
    --) shift; false ;;
    --*) die "Unknown option: $1" ;;
    *) false ;;
esac; do :; done

withfinalslash() {
    if [ -z "$1" ]; then return; fi
    case "$1" in
	*/)  println "$1" ;;
	*)   println "$1" ;;
    esac
}
patchdir="$(withfinalslash "$patchdir")"
topleveldir="$(withfinalslash "$topleveldir")"
prefixdir="$(withfinalslash "$prefixdir")"

f="$(namecommit HEAD)"
[ -z "f" ] && die "Internal error: Could not create patch name"
f="$f".patch

# gitdir="$(git rev-parse --git-dir)"
# t="$(git rev-parse --show-toplevel)"
# cd "$t"

git format-patch --binary -M70% -C70% -N -1 --stdout >"$patchdir""$f"

if [ -z "$patchdir" ]; then f="$prefixdir$f"; fi

b="$(branchname)"

git checkout --quiet --detach HEAD^

println "Uncommit: $f"
println "Uncommit: $f" >>"$topleveldir".uncommitted-patches

[ -n "$b" ] && selectbranch "$b" && git reset --soft HEAD^
