#!/bin/sh

# Copyright (c) 2012, 2013, 2014 Michele Bini <michele.bini@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the version 3 of the GNU General Public License
# as published by the Free Software Foundation.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

println() {
    printf "%s
" "$*"
}

warn() {
    println "$0: $*" >&2
}

die() {
    warn "$*"
    exit 1
}

noerr() {
    "$@" 2>/dev/null || true
}

# Directory where to save patches, can be absolute or relative to top-level of the worktree
patchdir="$(noerr git config --path --local --get git.uncommit.patchdir)"

# Top level of the work tree, if possible relative to current directory
topleveldir="$(noerr git rev-parse --show-cdup || noerr git rev-parse --show-toplevel)"

# Current directory, relative to top level of work tree
prefixdir="$(noerr git rev-parse --show-prefix)"

if [ -n "$patchdir" ]; then
    patchdir="$( ([ -n "$topleveldir" ] && cd "$topleveldir") && cd "$patchdir" && pwd)"
fi

withfinalslash() {
    if [ -z "$1" ]; then return; fi
    case "$1" in
	*/)  println "$1" ;;
	*)   println "$1" ;;
    esac
}

nocommit=""
while case "$1" in
    --patchdir) shift; patchdir="$1"; shift ;;
    --no-commit) shift; nocommit=1 ;;
    --) shift; false ;;
    --*) die "Unknown option: $1" ;;
    *) false ;;
esac; do :; done

f="$1"

patchdir="$(withfinalslash "$patchdir")"
topleveldir="$(withfinalslash "$topleveldir")"
prefixdir="$(withfinalslash "$prefixdir")"

u="$topleveldir".uncommitted-patches

if [ -z "$f" ]; then
    if [ -f "$u" ]; then
	f="$(tail -n1 "$u"|sed "s/^Uncommit: //")"
	sed -i "$ d" "$u"
    fi

    # Delete .uncommitted-patches if it's empty
    if [ -e "$u" ]; then
	[ -s "$u" ] || rm "$u"
    fi
fi

# This should only be performed in interactive mode
if [ -z "$f" ]; then
    # yn "Cannot find a patch to apply.  Look for the most recent one?"
    f="$(ls -R --sort=time|grep "[.]patch$"|head -n1)"
fi

if [ -n "$patchdir" ]; then
    f="$patchdir""$(basename "$f")"
else
    case "$f" in
	/*)  : ;;
	*)   f="$topleveldir"/"$f" ;;
    esac
fi

if [ -z "$f" ]; then
    die "No patch files found!"
fi

if [ -n "$nocommit" ]; then
    prehead="$(git rev-parse HEAD)"
fi

git am -3 "$f" && rm "$f"

if [ -n "$nocommit" ]; then
    git reset --soft "$prehead"
fi

